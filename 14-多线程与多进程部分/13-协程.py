# coding=utf-8
# 协程式yield --非抢占的程序
# 什么时候切换完全在我们的需求
# yield生成器,类似return,当使用next()调用的时候,
# 会进行返回,暂时保存yield所执行到的位置,当下次调用next()的时候,会接着上次的状态进行调用
# 用户态(我自己选择)的切换(微线程)线程
# 协程的本质是一个线程,没有所谓的消耗
# 协程的优势:
#           1.没有切换的消耗
#           2.没有锁的概念(因为本质上是一个线程)
#           3.不能用多核(解决方案:多进程+协程,python的最优解决高并发方案)
# 关键点:什么时候切换

# python中对yield协程的包装:greenlet(方法名),可以实现手动的线程切换

# 协程主要解决的也是IO操作的时候
# python中对协程最重要的封装:
